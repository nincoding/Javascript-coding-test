/*
1937년 Collatz란 사람에 의해 제기된 이 추측은, 
주어진 수가 1이 될 때까지 다음 작업을 반복하면, 
모든 수를 1로 만들 수 있다는 추측입니다. 
작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다. 
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.

예를 들어, 주어진 수가 6이라면 
6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 
위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, 
solution을 완성해 주세요. 
단, 주어진 수가 1인 경우에는 0을, 
작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.
*/


function solution(num) {
    var answer = 0;
    while(num != 1 && answer != 500){
        num % 2 == 0 ? num = num / 2 : num = num * 3 + 1;
        answer++;
    }
    return num == 1 ? answer : -1;
}

/*
num 은 1이 아닌 조건으로 시작한다. 그리고 반복될 수 또한 500이 아니여야 한다.
num이 2로 나눈 나머지 값이 0 이라면 짝수 즉, 짝수이면 num값은 계속해서 /2 를 하고 answer 수를 하나씩 증가해준다.
그리고 num 이 1이라면 하나씩 증가된 answer의 값을 출력

홀수라면 num * 3 + 1을 해준다. 
결국 짝수 홀수 계속 해서 반복하면 언젠가는 1이 나오므로
answer의 값을 출력할 수 있고,
반복문은 500번 이상이 되면 종료되므로 
출력값에는 500번이 됐을때 -1을 출력받을 수 있게 된다.
*/